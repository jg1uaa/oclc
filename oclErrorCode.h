#ifndef OCL_ERROR_CODE
#define OCL_ERROR_CODE


static const std::unordered_map<cl_int, std::string> kErrorMessageMap{
  // Run-time and JIT Compiler Errors (driver-dependent)
#ifdef CL_SUCCESS
  {CL_SUCCESS, "Success"},
#endif  // CL_SUCCESS
#ifdef CL_DEVICE_NOT_FOUND
  {CL_DEVICE_NOT_FOUND, "Device not found"},
#endif  // CL_DEVICE_NOT_FOUND
#ifdef CL_DEVICE_NOT_AVAILABLE
  {CL_DEVICE_NOT_AVAILABLE, "Device not available"},
#endif  // CL_DEVICE_NOT_AVAILABLE
#ifdef CL_COMPILER_NOT_AVAILABLE
  {CL_COMPILER_NOT_AVAILABLE, "Compiler not available"},
#endif  // CL_COMPILER_NOT_AVAILABLE
#ifdef CL_MEM_OBJECT_ALLOCATION_FAILURE
  {CL_MEM_OBJECT_ALLOCATION_FAILURE, "Memory object allocation failure"},
#endif  // CL_MEM_OBJECT_ALLOCATION_FAILURE
#ifdef CL_OUT_OF_RESOURCES
  {CL_OUT_OF_RESOURCES, "Out of resources"},
#endif  // CL_OUT_OF_RESOURCES
#ifdef CL_OUT_OF_HOST_MEMORY
  {CL_OUT_OF_HOST_MEMORY, "Out of host memory"},
#endif  // CL_OUT_OF_HOST_MEMORY
#ifdef CL_PROFILING_INFO_NOT_AVAILABLE
  {CL_PROFILING_INFO_NOT_AVAILABLE, "Profiling Info not available"},
#endif  // CL_PROFILING_INFO_NOT_AVAILABLE
#ifdef CL_MEM_COPY_OVERLAP
  {CL_MEM_COPY_OVERLAP, "Memoru copy overlap"},
#endif  // CL_MEM_COPY_OVERLAP
#ifdef CL_IMAGE_FORMAT_MISMATCH
  {CL_IMAGE_FORMAT_MISMATCH, "Image format mismatch"},
#endif  // CL_IMAGE_FORMAT_MISMATCH
#ifdef CL_IMAGE_FORMAT_NOT_SUPPORTED
  {CL_IMAGE_FORMAT_NOT_SUPPORTED, "Image format not supported"},
#endif  // CL_IMAGE_FORMAT_NOT_SUPPORTED
#ifdef CL_BUILD_PROGRAM_FAILURE
  {CL_BUILD_PROGRAM_FAILURE, "Build program failure"},
#endif  // CL_BUILD_PROGRAM_FAILURE
#ifdef CL_MAP_FAILURE
  {CL_MAP_FAILURE, "Map failure"},
#endif  // CL_MAP_FAILURE
#ifdef CL_MISALIGNED_SUB_BUFFER_OFFSET
  {CL_MISALIGNED_SUB_BUFFER_OFFSET, "Miss-aligned sub buffer offset"},
#endif  // CL_MISALIGNED_SUB_BUFFER_OFFSET
#ifdef CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST
  {CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST, "Execution status error for events in wait list"},
#endif  // CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST
#ifdef CL_COMPILE_PROGRAM_FAILURE
  {CL_COMPILE_PROGRAM_FAILURE, "Compile program failure"},
#endif  // CL_COMPILE_PROGRAM_FAILURE

  // OpenCL 1.2 or later
#ifdef CL_LINKER_NOT_AVAILABLE
  {CL_LINKER_NOT_AVAILABLE, "Linker not available"},
#endif  // CL_LINKER_NOT_AVAILABLE
#ifdef CL_LINK_PROGRAM_FAILURE
  {CL_LINK_PROGRAM_FAILURE, "Link program failure"},
#endif  // CL_LINK_PROGRAM_FAILURE
#ifdef CL_DEVICE_PARTITION_FAILED
  {CL_DEVICE_PARTITION_FAILED, "Device partition failed"},
#endif  // CL_DEVICE_PARTITION_FAILED
#ifdef CL_KERNEL_ARG_INFO_NOT_AVAILABLE
  {CL_KERNEL_ARG_INFO_NOT_AVAILABLE, "Lernel argument infomation is not available"},
#endif  // CL_KERNEL_ARG_INFO_NOT_AVAILABLE


  // Compile-time Errors (driver-independent)
#ifdef CL_INVALID_VALUE
  {CL_INVALID_VALUE, "Invalid value"},
#endif  // CL_INVALID_VALUE
#ifdef CL_INVALID_DEVICE_TYPE
  {CL_INVALID_DEVICE_TYPE, "Invalid device type"},
#endif  // CL_INVALID_DEVICE_TYPE
#ifdef CL_INVALID_PLATFORM
  {CL_INVALID_PLATFORM, "Invalid platfom"},
#endif  // CL_INVALID_PLATFORM
#ifdef CL_INVALID_DEVICE
  {CL_INVALID_DEVICE, "Invalid device"},
#endif  // CL_INVALID_DEVICE
#ifdef CL_INVALID_CONTEXT
  {CL_INVALID_CONTEXT, "Invalid context"},
#endif  // CL_INVALID_CONTEXT
#ifdef CL_INVALID_QUEUE_PROPERTIES
  {CL_INVALID_QUEUE_PROPERTIES, "Invalid queue properties"},
#endif  // CL_INVALID_QUEUE_PROPERTIES
#ifdef CL_INVALID_COMMAND_QUEUE
  {CL_INVALID_COMMAND_QUEUE, "Invalid command queue"},
#endif  // CL_INVALID_COMMAND_QUEUE
#ifdef CL_INVALID_HOST_PTR
  {CL_INVALID_HOST_PTR, "Invalid host pointer"},
#endif  // CL_INVALID_HOST_PTR
#ifdef CL_INVALID_MEM_OBJECT
  {CL_INVALID_MEM_OBJECT, "Invalid memory object"},
#endif  // CL_INVALID_MEM_OBJECT
#ifdef CL_INVALID_IMAGE_FORMAT_DESCRIPTOR
  {CL_INVALID_IMAGE_FORMAT_DESCRIPTOR, "Invalid image format descriptor"},
#endif  // CL_INVALID_IMAGE_FORMAT_DESCRIPTOR
#ifdef CL_INVALID_IMAGE_SIZE
  {CL_INVALID_IMAGE_SIZE, "Invalid image size"},
#endif  // CL_INVALID_IMAGE_SIZE
#ifdef CL_INVALID_SAMPLER
  {CL_INVALID_SAMPLER, "Invalid sampler"},
#endif  // CL_INVALID_SAMPLER
#ifdef CL_INVALID_BINARY
  {CL_INVALID_BINARY, "Invalid binary"},
#endif  // CL_INVALID_BINARY
#ifdef CL_INVALID_BUILD_OPTIONS
  {CL_INVALID_BUILD_OPTIONS, "Invalid build options"},
#endif  // CL_INVALID_BUILD_OPTIONS
#ifdef CL_INVALID_PROGRAM
  {CL_INVALID_PROGRAM, "Invalid program"},
#endif  // CL_INVALID_PROGRAM
#ifdef CL_INVALID_PROGRAM_EXECUTABLE
  {CL_INVALID_PROGRAM_EXECUTABLE, "Invalid program executable"},
#endif  // CL_INVALID_PROGRAM_EXECUTABLE
#ifdef CL_INVALID_KERNEL_NAME
  {CL_INVALID_KERNEL_NAME, "Invalid kernel name"},
#endif  // CL_INVALID_KERNEL_NAME
#ifdef CL_INVALID_KERNEL_DEFINITION
  {CL_INVALID_KERNEL_DEFINITION, "Invalid kernel definition"},
#endif  // CL_INVALID_KERNEL_DEFINITION
#ifdef CL_INVALID_KERNEL
  {CL_INVALID_KERNEL, "Invalid kernel"},
#endif  // CL_INVALID_KERNEL
#ifdef CL_INVALID_ARG_INDEX
  {CL_INVALID_ARG_INDEX, "Invalid argument index"},
#endif  // CL_INVALID_ARG_INDEX
#ifdef CL_INVALID_ARG_VALUE
  {CL_INVALID_ARG_VALUE, "Invalid argument value"},
#endif  // CL_INVALID_ARG_VALUE
#ifdef CL_INVALID_ARG_SIZE
  {CL_INVALID_ARG_SIZE, "Invalid argument size"},
#endif  // CL_INVALID_ARG_SIZE
#ifdef CL_INVALID_KERNEL_ARGS
  {CL_INVALID_KERNEL_ARGS, "Invalid kernel arguments"},
#endif  // CL_INVALID_KERNEL_ARGS
#ifdef CL_INVALID_WORK_DIMENSION
  {CL_INVALID_WORK_DIMENSION, "Invalid working dimensions"},
#endif  // CL_INVALID_WORK_DIMENSION
#ifdef CL_INVALID_WORK_GROUP_SIZE
  {CL_INVALID_WORK_GROUP_SIZE, "Invalid working group size"},
#endif  // CL_INVALID_WORK_GROUP_SIZE
#ifdef CL_INVALID_WORK_ITEM_SIZE
  {CL_INVALID_WORK_ITEM_SIZE, "Invalid working item size"},
#endif  // CL_INVALID_WORK_ITEM_SIZE
#ifdef CL_INVALID_GLOBAL_OFFSET
  {CL_INVALID_GLOBAL_OFFSET, "Invalid global offset"},
#endif  // CL_INVALID_GLOBAL_OFFSET
#ifdef CL_INVALID_EVENT_WAIT_LIST
  {CL_INVALID_EVENT_WAIT_LIST, "Invalid event wait list"},
#endif  // CL_INVALID_EVENT_WAIT_LIST
#ifdef CL_INVALID_EVENT
  {CL_INVALID_EVENT, "Invalid event"},
#endif  // CL_INVALID_EVENT
#ifdef CL_INVALID_OPERATION
  {CL_INVALID_OPERATION, "Invalid operation"},
#endif  // CL_INVALID_OPERATION
#ifdef CL_INVALID_GL_OBJECT
  {CL_INVALID_GL_OBJECT, "Invalid GL object"},
#endif  // CL_INVALID_GL_OBJECT
#ifdef CL_INVALID_BUFFER_SIZE
  {CL_INVALID_BUFFER_SIZE, "Invalid buffer size"},
#endif  // CL_INVALID_BUFFER_SIZE
#ifdef CL_INVALID_MIP_LEVEL
  {CL_INVALID_MIP_LEVEL, "Invalid MIP level"},
#endif  // CL_INVALID_MIP_LEVEL
#ifdef CL_INVALID_GLOBAL_WORK_SIZE
  {CL_INVALID_GLOBAL_WORK_SIZE, "Invalid global working size"},
#endif  // CL_INVALID_GLOBAL_WORK_SIZE
#ifdef CL_INVALID_PROPERTY
  {CL_INVALID_PROPERTY, "Invalid property"},
#endif  // CL_INVALID_PROPERTY

  // OpenCL 1.2 or later
#ifdef CL_INVALID_IMAGE_DESCRIPTOR
  {CL_INVALID_IMAGE_DESCRIPTOR, "Invalid image descriptions"},
#endif  // CL_INVALID_IMAGE_DESCRIPTOR
#ifdef CL_INVALID_COMPILER_OPTIONS
  {CL_INVALID_COMPILER_OPTIONS, "Invalid compiler options"},
#endif  // CL_INVALID_COMPILER_OPTIONS
#ifdef CL_INVALID_LINKER_OPTIONS
  {CL_INVALID_LINKER_OPTIONS, "Invalid linker options"},
#endif  // CL_INVALID_LINKER_OPTIONS
#ifdef CL_INVALID_DEVICE_PARTITION_COUNT
  {CL_INVALID_DEVICE_PARTITION_COUNT, "Invalid device partition count"},
#endif  // CL_INVALID_DEVICE_PARTITION_COUNT

  // OpenCL 2.0 or later
#ifdef CL_INVALID_PIPE_SIZE
  {CL_INVALID_PIPE_SIZE, "Invalid pipe size"},
#endif  // CL_INVALID_PIPE_SIZE
#ifdef CL_INVALID_DEVICE_QUEUE
  {CL_INVALID_DEVICE_QUEUE, "Invalid device queue"},
#endif  // CL_INVALID_DEVICE_QUEUE


  // Errors thrown by extensions
#ifdef CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR
  {CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR, "Invalid GL share group reference KHR"},
#endif  // CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR
#ifdef CL_PLATFORM_NOT_FOUND_KHR
  {CL_PLATFORM_NOT_FOUND_KHR, "Platform not found KHR"},
#endif  // CL_PLATFORM_NOT_FOUND_KHR
#ifdef CL_INVALID_D3D10_DEVICE_KHR
  {CL_INVALID_D3D10_DEVICE_KHR, "Invalid D3D10 device KHR"},
#endif  // CL_INVALID_D3D10_DEVICE_KHR
#ifdef CL_INVALID_D3D10_RESOURCE_KHR
  {CL_INVALID_D3D10_RESOURCE_KHR, "Invalid D3D10 resource KHR"},
#endif  // CL_INVALID_D3D10_RESOURCE_KHR
#ifdef CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR
  {CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR, "D3D10 resource already acquired KHR"},
#endif  // CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR
#ifdef CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR
  {CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR, "D3D10 resource is not acquired KHR"},
#endif  // CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR
#ifdef CL_INVALID_D3D11_DEVICE_KHR
  {CL_INVALID_D3D11_DEVICE_KHR, "Invalid D3D11 device KHR"},
#endif  // CL_INVALID_D3D11_DEVICE_KHR
#ifdef CL_INVALID_D3D11_RESOURCE_KHR
  {CL_INVALID_D3D11_RESOURCE_KHR, "Invalid D3D11 resource KHR"},
#endif  // CL_INVALID_D3D11_RESOURCE_KHR
#ifdef CL_D3D11_RESOURCE_ALREADY_ACQUIRED_KHR
  {CL_D3D11_RESOURCE_ALREADY_ACQUIRED_KHR, "D3D11 resource already acquired KHR"},
#endif  // CL_D3D11_RESOURCE_ALREADY_ACQUIRED_KHR
#ifdef CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR
  {CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR, "D3D11 resource is not acquired KHR"},
#endif  // CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR
#ifdef CL_INVALID_D3D9_DEVICE_NV
  {CL_INVALID_D3D9_DEVICE_NV, "Invalid D3D9 device NV"},
#endif  // CL_INVALID_D3D9_DEVICE_NV
#ifdef CL_INVALID_DX9_DEVICE_INTEL
  {CL_INVALID_DX9_DEVICE_INTEL, "Invalid D3D9 device Intel"},
#endif  // CL_INVALID_DX9_DEVICE_INTEL
#ifdef CL_INVALID_D3D9_RESOURCE_NV
  {CL_INVALID_D3D9_RESOURCE_NV, "Invalid D3D9 resource NV"},
#endif  // CL_INVALID_D3D9_RESOURCE_NV
#ifdef CL_INVALID_DX9_RESOURCE_INTEL
  {CL_INVALID_DX9_RESOURCE_INTEL, "Invalid D3D9 resource Intel"},
#endif  // CL_INVALID_DX9_RESOURCE_INTEL
#ifdef CL_D3D9_RESOURCE_ALREADY_ACQUIRED_NV
  {CL_D3D9_RESOURCE_ALREADY_ACQUIRED_NV, "D3D9 resource already acquired NV"},
#endif  // CL_D3D9_RESOURCE_ALREADY_ACQUIRED_NV
#ifdef CL_DX9_RESOURCE_ALREADY_ACQUIRED_INTEL
  {CL_DX9_RESOURCE_ALREADY_ACQUIRED_INTEL, "D3D9 resource already acquired Intel"},
#endif  // CL_DX9_RESOURCE_ALREADY_ACQUIRED_INTEL
#ifdef CL_D3D9_RESOURCE_NOT_ACQUIRED_NV
  {CL_D3D9_RESOURCE_NOT_ACQUIRED_NV, "D3D9 resource is not acquired NV"},
#endif  // CL_D3D9_RESOURCE_NOT_ACQUIRED_NV
#ifdef CL_DX9_RESOURCE_NOT_ACQUIRED_INTEL
  {CL_DX9_RESOURCE_NOT_ACQUIRED_INTEL, "D3D9 resource is not acquired Intel"},
#endif  // CL_DX9_RESOURCE_NOT_ACQUIRED_INTEL
#ifdef CL_EGL_RESOURCE_NOT_ACQUIRED_KHR
  {CL_EGL_RESOURCE_NOT_ACQUIRED_KHR, "EGL resource is not acquired KHR"},
#endif  // CL_EGL_RESOURCE_NOT_ACQUIRED_KHR
#ifdef CL_INVALID_EGL_OBJECT_KHR
  {CL_INVALID_EGL_OBJECT_KHR, "Invalid EGL object KHR"},
#endif  // CL_INVALID_EGL_OBJECT_KHR
#ifdef CL_INVALID_ACCELERATOR_INTEL
  {CL_INVALID_ACCELERATOR_INTEL, "Invalid accelerator Intel"},
#endif  // CL_INVALID_ACCELERATOR_INTEL
#ifdef CL_INVALID_ACCELERATOR_TYPE_INTEL
  {CL_INVALID_ACCELERATOR_TYPE_INTEL, "Invalid accelerator type Intel"},
#endif  // CL_INVALID_ACCELERATOR_TYPE_INTEL
#ifdef CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL
  {CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL, "Invalid accelerator descriptor Intel"},
#endif  // CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL
#ifdef CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL
  {CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL, "Accelerator type not supported Intel"},
#endif  // CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL
#ifdef CL_INVALID_VA_API_MEDIA_ADAPTER_INTEL
  {CL_INVALID_VA_API_MEDIA_ADAPTER_INTEL, "Invald VA API Media adaptor Intel"},
#endif  // CL_INVALID_VA_API_MEDIA_ADAPTER_INTEL
#ifdef CL_INVALID_VA_API_MEDIA_SURFACE_INTEL
  {CL_INVALID_VA_API_MEDIA_SURFACE_INTEL, "Invalid VA API media surface Intel"},
#endif  // CL_INVALID_VA_API_MEDIA_SURFACE_INTEL
#ifdef CL_VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL
  {CL_VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL, "VA API media surface already acquired Intel"},
#endif  // CL_VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL
#ifdef CL_VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL
  {CL_VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL, "VA API media surface not acquired Intel"},
#endif  // CL_VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL

  // Errors thrown by Vendors
  {-9999, "(NVidia) Illegal read or write to a buffer"}
};


#endif  // OCL_ERROR_CODE
